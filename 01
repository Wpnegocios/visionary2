import os
import numpy as np
import pandas as pd
import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from torch.utils.data import DataLoader, TensorDataset
import logging
import requests
from fastapi import FastAPI, HTTPException, Depends
from fastapi.responses import HTMLResponse
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from pydantic import BaseModel
import jwt
from datetime import datetime, timedelta
import plotly.graph_objects as go
import plotly.io as pio
import uvicorn
from dotenv import load_dotenv

# Carregar variáveis de ambiente do arquivo .env
load_dotenv()

# Configuração de logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# Configurações via ambiente
SECRET_KEY = os.getenv("SECRET_KEY", "default-secret-key")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv("TOKEN_EXPIRE_MINUTES", 30))
ALPHA_VANTAGE_API_KEY = os.getenv("ALPHA_VANTAGE_API_KEY", "default_api_key")
DEFAULT_USER_PASSWORD = os.getenv("DEFAULT_USER_PASSWORD", "password123")

# Configurações fixas
CONFIG = {
    "model": {"input_size": 10, "hidden_size": 32, "output_size": 3, "lstm_layers": 1, "dropout_prob": 0.2},
    "training": {"epochs": 20, "batch_size": 32, "learning_rate": 0.001, "patience": 5},
    "data": {
        "ativos": ["USD/BRL Futuro", "S&P 500 Futuro"],
        "lookback_period": 20,
        "sequence_length": 10,
        "api": {"provider": "alpha_vantage", "use_fallback": True}
    }
}

# Base de usuários simulada
USERS_DB = {"user": {"username": "user", "password": DEFAULT_USER_PASSWORD}}
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/token")

def create_access_token(data: dict):
    to_encode = data.copy()
    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

async def get_current_user(token: str = Depends(oauth2_scheme)):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username = payload.get("sub")
        if not username or username not in USERS_DB:
            raise HTTPException(status_code=401, detail="Usuário inválido")
        return username
    except jwt.PyJWTError:
        raise HTTPException(status_code=401, detail="Token inválido")

# Funções de API
def get_dados_ativo(ativo: str, api_config: dict, use_fallback: bool = True) -> pd.DataFrame:
    try:
        logger.info(f"Consultando Alpha Vantage para {ativo}")
        url = f"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={ativo}&apikey={ALPHA_VANTAGE_API_KEY}&outputsize=full"
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        if "Time Series (Daily)" not in data:
            raise ValueError("Formato de resposta inválido")
        df = pd.DataFrame.from_dict(data["Time Series (Daily)"], orient="index")
        df = df.rename(columns={"1. open": "open", "2. high": "high", "3. low": "low", "4. close": "close", "5. volume": "volume"})
        df = df[["high", "low", "close", "volume"]].astype(float)
        df.index = pd.to_datetime(df.index)
        return df
    except Exception as e:
        logger.error(f"Erro ao consultar API: {e}")
        if use_fallback:
            logger.warning(f"Usando dados fictícios para {ativo}")
            data = {
                "high": np.random.rand(500) * 100 + 50,
                "low": np.random.rand(500) * 50 + 20,
                "close": np.random.rand(500) * 80 + 30,
                "volume": np.random.rand(500) * 1000
            }
            return pd.DataFrame(data, index=pd.date_range(start="2023-01-01", periods=500, freq="D"))
        raise

# Modelo (reutilizar modelo pré-treinado)
class ModeloMercado(nn.Module):
    def __init__(self, input_size: int, hidden_size: int, output_size: int, lstm_layers: int, dropout_prob: float):
        super(ModeloMercado, self).__init__()
        self.lstm = nn.LSTM(input_size, hidden_size, num_layers=lstm_layers, batch_first=True, dropout=dropout_prob)
        self.fc = nn.Linear(hidden_size, output_size)
        self.softmax = nn.Softmax(dim=1)

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        lstm_out, _ = self.lstm(x)
        out = self.fc(lstm_out[:, -1, :])
        return self.softmax(out)

# FastAPI
app = FastAPI()

@app.post("/token")
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    user = USERS_DB.get(form_data.username)
    if not user or user["password"] != form_data.password:
        raise HTTPException(status_code=401, detail="Credenciais inválidas")
    access_token = create_access_token(data={"sub": form_data.username})
    return {"access_token": access_token, "token_type": "bearer"}

@app.get("/", response_class=HTMLResponse)
async def get_index():
    return HTMLResponse("<h1>Bem-vindo à API de Previsão de Mercado</h1>")

@app.post("/predict")
async def predict(request: BaseModel, user: str = Depends(get_current_user)):
    try:
        logger.info(f"Previsão para {request.ativo} por {user}")
        df = get_dados_ativo(request.ativo, CONFIG["data"]["api"], CONFIG["data"]["use_fallback"])
        # Aqui você pode carregar um modelo pré-treinado (modelo.pt) e reutilizá-lo
        modelo = ModeloMercado(
            input_size=CONFIG["model"]["input_size"],
            hidden_size=CONFIG["model"]["hidden_size"],
            output_size=CONFIG["model"]["output_size"],
            lstm_layers=CONFIG["model"]["lstm_layers"],
            dropout_prob=CONFIG["model"]["dropout_prob"]
        )
        modelo.load_state_dict(torch.load("modelo.pt"))
        modelo.eval()
        # Implementar lógica de previsão aqui
        return {"message": "Previsão concluída"}
    except Exception as e:
        logger.error(f"Erro: {e}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
